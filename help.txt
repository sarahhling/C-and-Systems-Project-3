#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>


struct privileges
{
  bool run_all_programs_without_password;
  bool install_any_programs;
  bool uninstall_any_programs;
  bool manage_admin_users; //the less users that have this privilege, the better
};

struct user
{
  char username[50];
  char password[50];
  int admin_level;
  struct privileges admin_privileges;
};

int main(void) 
{
  //Declaring and initializing a structure variable
  struct user user1 = {"vahab", "fgH!12", 0, {false, false, false, false}};
  user1.admin_level = 1; //the dot operator
  user1.admin_privileges.install_any_programs = true;

  struct privileges* vahab_admin_privileges = &user1.admin_privileges;

  printf("%ld\n", sizeof(user1)); //108

  //An array of 3 users
  struct user* users = (struct user*) malloc(3 * sizeof(struct user));
  
  //How is this stored in memory?

  if (users == NULL)
    return EXIT_FAILURE;

  strcpy((*users).username, "admin");
  strcpy(users->password, "s#1Pa5"); //the arrow operator
  users->admin_level = 4;
  (users->admin_privileges).manage_admin_users = true;
  
  //Copying the contents of user1 to users[1]
  memcpy(users+1, &user1, sizeof(struct user));
  
  //Set all bytes to 0 for users[2]
  memset(users+2, 0, sizeof(struct user));

  //Allow vahab to unintall any programs
  (users+1)->admin_privileges.uninstall_any_programs = true;

  //Changing vahab to v@hab for users[1]
  (users+1)->username[1] = '@';
  *(((users+1)->username)+1) = '@';

  printf("%s\n", users->username); //"admin"
  printf("%s\n", users->password);
  printf("%s\n", (users+1)->username); //"v@hab"
  printf("%s\n", (users+1)->password);

  printf("%s\n", (char *)users); //"admin"
  
  //This is a common practice if you want to iterate through a struct byte-by-byte
  printf("%d\n", *((int*) (((char *)users) + 100))); //4


  return EXIT_SUCCESS;
}